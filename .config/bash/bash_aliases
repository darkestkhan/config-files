# handy aliases + color support 
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --group-directories-first --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# ls aliases
alias ll='ls --group-directories-first -l'
alias la='ls --group-directories-first -A'
alias l='ls --group-directories-first -CF'

if [ -f /usr/bin/colordiff ]; then
  alias diff='colordiff'
fi

# private aliases
alias gcc='gcc -Wall'
alias g++='g++ -Wall'
alias gfortran='gfortran -Wall'
alias emacs='emacs -nw'
alias python='python3'
alias clisp='clisp -i ${HOME}/lib/std.cl'
alias ghostscript='ghostscript -dSAFER'
alias gs='gs -dSAFER'
alias dir2ogv='dir2ogv.sh'

# aptitude aliases
alias sapt='aptitude search'
alias ssapt='apt-get source'
alias vapt='aptitude versions'

# More complicated ``aliases''

Initialize_Library_Description="
# Initialize repository (directory structure, basic files, git init and\n
# commit) for library type of project.\n"
function Initialize_Library ( )
{
  git init
  mkdir src lib obj tests tests/src tests/bin tests/obj
  touch README COPYING AUTHORS INSTALL NEWS ChangeLog
  cp ${VIMHOME}/templates/make.sh.tpl ./make.sh
  git add *
  git ci -m "Initial commit."
}

Initialize_Project_Description="
# Initialize repository (directory structure, basic files, git init and\n
# commit)\n"
function Initialize_Project ( )
{
  git init
  mkdir src obj tests tests/src tests/bin tests/obj
  touch README COPYING AUTHORS INSTALL NEWS ChangeLog
  git add *
  git ci -m "Initial commit."
}

Create_Symbolic_Link_To_PWD_Description="
# Create symbolic link from foo to \$PWD\n
# Example Usage: Create_Symbolic_Link_To_PWD \${HOME}/.bashrc\n"
function Create_Symbolic_Link_To_PWD ( )
{
  if test $# -ne 1
  then
    echo "Error: Incorrect number of arguments and/or argument with\
separator. Should be 1, was $#."
  else
    ln -s $1 ${PWD}
  fi
}

Copy_License_Text_Description="
# Copy one of the licenses to \$PWD (overwriting COPYING file)\n
# Example Usage: Copy_License_Text GPL3\n
# Supported licenses: GPL3 LGPL3 ISC\n"
function Copy_License_Text ( )
{
  if test $# -ne 1
  then
    echo "Error: Incorrect number of arguments. Should be 1, was $#."
  else
    case $1 in
      "GPL3")
        cp -f ${LICENSEDIR}/GPLv3 COPYING
        ;;
      "LGPL3")
        cp -f ${LICENSEDIR}/LGPLv3 COPYING
        ;;
      "ISC")
        cp -f ${LICENSEDIR}/ISC COPYING
        ;;
      *)
        echo "Error: Unknown license. If not a typo add it to licenses."
        ;;
    esac
  fi
}

Refresh_GPR_Path_Description="
# Refresh \$GPR_PROJECT_PATH environmental variable - should be called after\n
# Add_To_GPR_Path.\n"
function Refresh_GPR_Path ( )
{
  if test $# -ne 0
  then
    echo "Error: Incorrect number of arguments. Should be 0, was $#."
  else
    . ${HOME}/.config/bash/gpr_project_path
  fi
}

Add_To_GPR_Path_Description="
# Add new path to file containing GPR_PROJECT_PATH. Call Refresh_GPR_Path\n
# after calling this function to actually use new path. This is done to make\n
# it quick to change GPR_PROJECT_PATH in a way such that it is preserved\n
# between reboots.\n"
function Add_To_GPR_Path ( )
{
  if test $# -ne 1
  then
    echo "Error: Incorrect number of arguments. Should be 1, was $#."
  else
    echo "export GPR_PROJECT_PATH=$GPR_PROJECT_PATH:$1" \
      >${XDG_CONFIG_HOME}/bash/gpr_project_path
  fi
}

gprrebuild_Description="
# Runs gprclean and gprbuild. If you don't specify argument then default\n
# project file is used. Otherwise specified one will be.\n"
function gprrebuild ( )
{
  if test $# -gt 1
  then
    echo "Error: Incorrect number of arguments. Should be 0 or 1, was $#."
  fi

  if test $# -eq 0
  then
    gprclean
    gprbuild
  else
    if test $# -eq 1
    then
      gprclean "$1"
      gprbuild "$1"
    fi
  fi
}

Help_Description="
# Print available descriptions of all custom functions."
function Help ( )
{
  Help_Array=(
      "Initialize_Library"          "$Initialize_Library_Description"
      "Initialize_Project"          "$Initialize_Project_Description"
      "Create_Symbolic_Link_To_PWD" "$Create_Symbolic_Link_To_PWD_Description"
      "Copy_License_Text"           "$Copy_License_Text_Description"
      "Refresh_GPR_Path"            "$Refresh_GPR_Path_Description"
      "Add_To_GPR_Path"             "$Add_To_GPR_Path_Description"
      "gprrebuild"                  "$gprrebuild_Description"
      "Help"                        "$Help_Description"
    )

  if test $# -eq 0
  then
    for K in ${!Help_Array[*]}
    do
      echo -e ${Help_Array[$K]}
    done
  else
    case $1 in
      "list" )
        K=0
        while test $K -lt ${#Help_Array[*]}
        do
          echo -e ${Help_Array[$K]}
          K=$((K+=2))
        done
        ;;
      * )
        K=0
        while test $K -lt ${#Help_Array[*]}
        do
          if test $1 = ${Help_Array[$K]}
          then
            echo -e ${Help_Array[$K]}
            K=$((K+=1))
            echo -n -e ${Help_Array[$K]}
            return 0
          else
            K=$((K+=2))
          fi
        done
        echo -e "Unknown function: $1"
        ;;
    esac
  fi
}
