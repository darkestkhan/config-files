# handy aliases + color support 
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --group-directories-first --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# ls aliases
alias ll='ls --group-directories-first -l'
alias la='ls --group-directories-first -A'
alias l='ls --group-directories-first -CF'

if [ -f /usr/bin/colordiff ]; then
  alias diff='colordiff'
fi

# private aliases
alias gcc='gcc -Wall'
alias g++='g++ -Wall'
alias gfortran='gfortran -Wall'
alias emacs='emacs23 -nw'
alias python='python3.2'
alias clisp='clisp -i ${HOME}/lib/std.cl'
alias ghostscript='ghostscript -dSAFER'
alias gs='gs -dSAFER'
alias dir2ogv='dir2ogv.sh'

# aptitude aliases
alias sapt='aptitude search'
alias ssapt='apt-get source'
alias vapt='aptitude versions'

# More complicated ``aliases''

Initialize_Library_Description="Initialize_Library\n\
# Initialize repository (directory structure, basic files, git init and commit)\n\
# for library type of project."
function Initialize_Library ( )
{
  git init
  mkdir src lib obj tests tests/src tests/bin tests/obj
  touch README COPYING AUTHORS INSTALL NEWS ChangeLog
  cp ${VIMHOME}/templates/make.sh.tpl ./make.sh
  git add *
  git ci -m "Initial commit."
}

Initialize_Project_Description="Initialize_Project\n\
# Initialize repository (directory structure, basic files, git init and commit)."
function Initialize_Project ( )
{
  git init
  mkdir src obj tests tests/src tests/bin tests/obj
  touch README COPYING AUTHORS INSTALL NEWS ChangeLog
  git add *
  git ci -m "Initial commit."
}

Create_Symbolic_Link_To_PWD_Description="Create_Symbolic_Link_To_PWD\n\
# Create symbolic link from foo to \$PWD
# Example Usage: Create_Symbolic_Link_To_PWD \${HOME}/.bashrc"
function Create_Symbolic_Link_To_PWD ( )
{
  if test $# -ne 1
  then
    echo "Error: Incorrect number of arguments and/or argument with separator. Should be 1, was $#."
  else
    ln -s $1 ${PWD}
  fi
}

Copy_License_Text_Description="Copy_License_Text\n\
# Copy one of the licenses to \$PWD (overwriting COPYING file)\n\
# Example Usage: Copy_License_Text GPL3\n
# Supported licenses: GPL3 LGPL3"
function Copy_License_Text ( )
{
  if test $# -ne 1
  then
    echo "Error: Incorrect number of arguments. Should be 1, was $#."
  else
    case $1 in
      "GPL3")
        cp -f ${LICENSEDIR}/GPLv3 COPYING
        ;;
      "LGPL3")
        cp -f ${LICENSEDIR}/LGPLv3 COPYING
        ;;
      *)
        echo "Error: Unknown license. If not a typo add it to licenses."
        ;;
    esac
  fi
}

Refresh_GPR_Path_Description="Refresh_GPR_Path\n\
# Refresh \$GPR_PROJECT_PATH environmental variable - should be called after\n\
# Add_To_GPR_Path."
function Refresh_GPR_Path ( )
{
  if test $# -ne 0
  then
    echo "Error: Incorrect number of arguments. Should be 0, was $#."
  else
    . ${HOME}/.config/bash/gpr_project_path
  fi
}

Add_To_GPR_Path_Description="Add_To_GPR_Path\n\
# Add new path to file containing GPR_PROJECT_PATH. Call Refresh_GPR_Path\n\
# after calling this function to actually use new path. This is done to make it\n\
# quick to change GPR_PROJECT_PATH in a way such that it is preserved between\n\
# reboots."
function Add_To_GPR_Path ( )
{
  if test $# -ne 1
  then
    echo "Error: Incorrect number of arguments. Should be 0, was $#."
  else
    echo "export GPR_PROJECT_PATH=$GPR_PROJECT_PATH:$1" \
      >${HOME}/.config/bash/gpr_project_path
  fi
}

Help_Description="Help\n\
# Print available descriptions of all custom functions."
function Help ( )
{
  echo -e "$Help_Description\n"
  echo -e "$Initialize_Project_Description\n"
  echo -e "$Create_Symbolic_Link_To_PWD_Description\n"
  echo -e "$Copy_License_Text_Description\n"
  echo -e "$Refresh_GPR_Path_Description\n"
  echo -e "$Add_To_GPR_Path_Description\n"
}
